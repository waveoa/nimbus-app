require('dotenv').config();
const { Client, Intents, Collection } = require('discord.js');
const fs = require('fs');
const path = require('path');

// Create a new client instance
const client = new Client({ intents: [Intents.FLAGS.GUILDS] });
client.commands = new Collection();

// Read command files
const commandFiles = fs.readdirSync(path.join(__dirname, 'Nimbus', 'commands')).filter(file => file.endsWith('.js'));

for (const file of commandFiles) {
    const command = require(`./Nimbus/commands/${file}`);
    client.commands.set(command.data.name, command);
}

client.once('ready', () => {
    console.log(`Logged in as ${client.user.tag}!`);
});

client.on('interactionCreate', async interaction => {
    if (!interaction.isCommand()) return;

    const command = client.commands.get(interaction.commandName);

    if (!command) return;

    try {
        await command.execute(interaction);
    } catch (error) {
        console.error(error);
        await interaction.reply({ content: 'There was an error while executing this command!', ephemeral: true });
    }
});

// Reload command handler
client.on('interactionCreate', async interaction => {
    if (!interaction.isCommand()) return;

    if (interaction.commandName === 'reload') {
        if (interaction.user.id !== process.env.AUTHORIZED_USER_ID) {
            return interaction.reply({ content: 'You are not authorized to use this command.', ephemeral: true });
        }

        try {
            // Clear the previous commands
            client.commands.clear();

            // Reload commands from files
            const newCommandFiles = fs.readdirSync(path.join(__dirname, 'Nimbus', 'commands')).filter(file => file.endsWith('.js'));

            for (const file of newCommandFiles) {
                const command = require(`./Nimbus/commands/${file}`);
                client.commands.set(command.data.name, command);
            }

            await interaction.reply('Commands have been reloaded successfully!');
        } catch (error) {
            console.error(error);
            await interaction.reply({ content: 'There was an error reloading the commands!', ephemeral: true });
        }
    }
});

client.login(process.env.DISCORD_TOKEN);